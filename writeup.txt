1. In the construction of HMAC, there are two passes of calculating hash. Although the calculation of hash depends on states which is subjected to length extension, the second pass of hash calculation of previous hash result with k xor c insures that unless attacker knows passwords, he cannot derive the result of HMAC. If only have one pass, attacker can append any message after original one once he knows the padding schema.
2. If it is possilbe for a attacker to create two programs that have identical MD5 hashes but actually do the extremly different behaviors. Then the hacker can modify the valid program and change the essential part of the code inside and keep all the remaining same. Then if the code is still in same MD5 hash with the original one, the users who download the fake program will still consider the one as genuine before installing and execution since the fake one can pass the MD5 hash authentication. And by this method, the hackers may be able to use the fake program to hack into users' machine.
3. Bleichenbacher's attack needs e to be small enough. If e is big enough, the nthroot function will run extremely slow, causing it impossible to derive the signature. On the other hand, if e is big enough, the power of s to the power of e will be more likely to be greater then n, which does "wrap around" the modulus n. In this case, it is hard to generate signature for the message.